/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LabelsImport } from './routes/labels'
import { Route as AssigneesImport } from './routes/assignees'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as ProjectsProjectIdImport } from './routes/projects/$projectId'
import { Route as ProjectsProjectIdIndexImport } from './routes/projects/$projectId/index'
import { Route as ProjectsProjectIdBacklogImport } from './routes/projects/$projectId/backlog'

// Create/Update Routes

const LabelsRoute = LabelsImport.update({
  id: '/labels',
  path: '/labels',
  getParentRoute: () => rootRoute,
} as any)

const AssigneesRoute = AssigneesImport.update({
  id: '/assignees',
  path: '/assignees',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsProjectIdRoute = ProjectsProjectIdImport.update({
  id: '/projects/$projectId',
  path: '/projects/$projectId',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsProjectIdIndexRoute = ProjectsProjectIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProjectsProjectIdRoute,
} as any)

const ProjectsProjectIdBacklogRoute = ProjectsProjectIdBacklogImport.update({
  id: '/backlog',
  path: '/backlog',
  getParentRoute: () => ProjectsProjectIdRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/assignees': {
      id: '/assignees'
      path: '/assignees'
      fullPath: '/assignees'
      preLoaderRoute: typeof AssigneesImport
      parentRoute: typeof rootRoute
    }
    '/labels': {
      id: '/labels'
      path: '/labels'
      fullPath: '/labels'
      preLoaderRoute: typeof LabelsImport
      parentRoute: typeof rootRoute
    }
    '/projects/$projectId': {
      id: '/projects/$projectId'
      path: '/projects/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProjectsProjectIdImport
      parentRoute: typeof rootRoute
    }
    '/projects/$projectId/backlog': {
      id: '/projects/$projectId/backlog'
      path: '/backlog'
      fullPath: '/projects/$projectId/backlog'
      preLoaderRoute: typeof ProjectsProjectIdBacklogImport
      parentRoute: typeof ProjectsProjectIdImport
    }
    '/projects/$projectId/': {
      id: '/projects/$projectId/'
      path: '/'
      fullPath: '/projects/$projectId/'
      preLoaderRoute: typeof ProjectsProjectIdIndexImport
      parentRoute: typeof ProjectsProjectIdImport
    }
  }
}

// Create and export the route tree

interface ProjectsProjectIdRouteChildren {
  ProjectsProjectIdBacklogRoute: typeof ProjectsProjectIdBacklogRoute
  ProjectsProjectIdIndexRoute: typeof ProjectsProjectIdIndexRoute
}

const ProjectsProjectIdRouteChildren: ProjectsProjectIdRouteChildren = {
  ProjectsProjectIdBacklogRoute: ProjectsProjectIdBacklogRoute,
  ProjectsProjectIdIndexRoute: ProjectsProjectIdIndexRoute,
}

const ProjectsProjectIdRouteWithChildren =
  ProjectsProjectIdRoute._addFileChildren(ProjectsProjectIdRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/assignees': typeof AssigneesRoute
  '/labels': typeof LabelsRoute
  '/projects/$projectId': typeof ProjectsProjectIdRouteWithChildren
  '/projects/$projectId/backlog': typeof ProjectsProjectIdBacklogRoute
  '/projects/$projectId/': typeof ProjectsProjectIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/assignees': typeof AssigneesRoute
  '/labels': typeof LabelsRoute
  '/projects/$projectId/backlog': typeof ProjectsProjectIdBacklogRoute
  '/projects/$projectId': typeof ProjectsProjectIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/assignees': typeof AssigneesRoute
  '/labels': typeof LabelsRoute
  '/projects/$projectId': typeof ProjectsProjectIdRouteWithChildren
  '/projects/$projectId/backlog': typeof ProjectsProjectIdBacklogRoute
  '/projects/$projectId/': typeof ProjectsProjectIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/assignees'
    | '/labels'
    | '/projects/$projectId'
    | '/projects/$projectId/backlog'
    | '/projects/$projectId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/assignees'
    | '/labels'
    | '/projects/$projectId/backlog'
    | '/projects/$projectId'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/assignees'
    | '/labels'
    | '/projects/$projectId'
    | '/projects/$projectId/backlog'
    | '/projects/$projectId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AssigneesRoute: typeof AssigneesRoute
  LabelsRoute: typeof LabelsRoute
  ProjectsProjectIdRoute: typeof ProjectsProjectIdRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AssigneesRoute: AssigneesRoute,
  LabelsRoute: LabelsRoute,
  ProjectsProjectIdRoute: ProjectsProjectIdRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/about",
        "/assignees",
        "/labels",
        "/projects/$projectId"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/about": {
      "filePath": "about.jsx"
    },
    "/assignees": {
      "filePath": "assignees.jsx"
    },
    "/labels": {
      "filePath": "labels.jsx"
    },
    "/projects/$projectId": {
      "filePath": "projects/$projectId.jsx",
      "children": [
        "/projects/$projectId/backlog",
        "/projects/$projectId/"
      ]
    },
    "/projects/$projectId/backlog": {
      "filePath": "projects/$projectId/backlog.jsx",
      "parent": "/projects/$projectId"
    },
    "/projects/$projectId/": {
      "filePath": "projects/$projectId/index.jsx",
      "parent": "/projects/$projectId"
    }
  }
}
ROUTE_MANIFEST_END */
